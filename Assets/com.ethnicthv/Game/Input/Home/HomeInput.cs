//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/com.ethnicthv/Game/Input/Home/HomeInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace cm.ethnicthv.Game.Input.Home
{
    public partial class @HomeInput: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @HomeInput()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""HomeInput"",
    ""maps"": [
        {
            ""name"": ""Home"",
            ""id"": ""dbaf65cc-84fe-4756-9772-da0b70a4918c"",
            ""actions"": [
                {
                    ""name"": ""Drag"",
                    ""type"": ""Button"",
                    ""id"": ""5c591765-a46f-49f7-911f-d074cbdb7236"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Press"",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DragDelta"",
                    ""type"": ""Value"",
                    ""id"": ""fa024599-f96a-405e-ac19-359418f9c517"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tap"",
                    ""type"": ""Button"",
                    ""id"": ""c5c34aee-86da-433d-acae-3033299e7eb3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f6ee0a81-626b-4142-b045-3ff4b0037c6c"",
                    ""path"": ""<Touchscreen>/primaryTouch/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drag"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""62896cbf-c49d-449d-a6e8-316ffe331fd0"",
                    ""path"": ""<Touchscreen>/primaryTouch/tap"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Tap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""973b901c-7409-4b38-9b1d-8aa80bcd623a"",
                    ""path"": ""<Touchscreen>/primaryTouch/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DragDelta"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Home
            m_Home = asset.FindActionMap("Home", throwIfNotFound: true);
            m_Home_Drag = m_Home.FindAction("Drag", throwIfNotFound: true);
            m_Home_DragDelta = m_Home.FindAction("DragDelta", throwIfNotFound: true);
            m_Home_Tap = m_Home.FindAction("Tap", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Home
        private readonly InputActionMap m_Home;
        private List<IHomeActions> m_HomeActionsCallbackInterfaces = new List<IHomeActions>();
        private readonly InputAction m_Home_Drag;
        private readonly InputAction m_Home_DragDelta;
        private readonly InputAction m_Home_Tap;
        public struct HomeActions
        {
            private @HomeInput m_Wrapper;
            public HomeActions(@HomeInput wrapper) { m_Wrapper = wrapper; }
            public InputAction @Drag => m_Wrapper.m_Home_Drag;
            public InputAction @DragDelta => m_Wrapper.m_Home_DragDelta;
            public InputAction @Tap => m_Wrapper.m_Home_Tap;
            public InputActionMap Get() { return m_Wrapper.m_Home; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(HomeActions set) { return set.Get(); }
            public void AddCallbacks(IHomeActions instance)
            {
                if (instance == null || m_Wrapper.m_HomeActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_HomeActionsCallbackInterfaces.Add(instance);
                @Drag.started += instance.OnDrag;
                @Drag.performed += instance.OnDrag;
                @Drag.canceled += instance.OnDrag;
                @DragDelta.started += instance.OnDragDelta;
                @DragDelta.performed += instance.OnDragDelta;
                @DragDelta.canceled += instance.OnDragDelta;
                @Tap.started += instance.OnTap;
                @Tap.performed += instance.OnTap;
                @Tap.canceled += instance.OnTap;
            }

            private void UnregisterCallbacks(IHomeActions instance)
            {
                @Drag.started -= instance.OnDrag;
                @Drag.performed -= instance.OnDrag;
                @Drag.canceled -= instance.OnDrag;
                @DragDelta.started -= instance.OnDragDelta;
                @DragDelta.performed -= instance.OnDragDelta;
                @DragDelta.canceled -= instance.OnDragDelta;
                @Tap.started -= instance.OnTap;
                @Tap.performed -= instance.OnTap;
                @Tap.canceled -= instance.OnTap;
            }

            public void RemoveCallbacks(IHomeActions instance)
            {
                if (m_Wrapper.m_HomeActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IHomeActions instance)
            {
                foreach (var item in m_Wrapper.m_HomeActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_HomeActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public HomeActions @Home => new HomeActions(this);
        public interface IHomeActions
        {
            void OnDrag(InputAction.CallbackContext context);
            void OnDragDelta(InputAction.CallbackContext context);
            void OnTap(InputAction.CallbackContext context);
        }
    }
}
